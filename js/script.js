// –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
document.getElementById("menu-btn").onclick = function () {
  document.getElementById("sidebar").style.left = "0";
};

document.getElementById("close-btn").onclick = function () {
  document.getElementById("sidebar").style.left = "-250px";
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function (event) {
  if (!event.target.matches("#menu-btn") && !event.target.closest("#sidebar")) {
    document.getElementById("sidebar").style.left = "-250px";
  }
};

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
document.getElementById("theme-toggle").onclick = function () {
  document.body.classList.toggle("light-theme");
  const icon = document.getElementById("theme-toggle");
  icon.textContent = document.body.classList.contains("light-theme")
    ? "üåû"
    : "üåô";
  updateFlatpickrTheme();
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã Flatpickr
function updateFlatpickrTheme() {
  const calendars = document.querySelectorAll(".flatpickr-calendar");
  calendars.forEach((calendar) => {
    if (document.body.classList.contains("light-theme")) {
      calendar.classList.remove("dark");
      calendar.classList.add("light");
    } else {
      calendar.classList.remove("light");
      calendar.classList.add("dark");
    }
  });
}

// –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
window.onload = function () {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
  const temperatureGraph = document.getElementById("temperature-graph");
  if (temperatureGraph) {
    const ctxTemp = temperatureGraph.getContext("2d");
    new Chart(ctxTemp, {
      type: "line",
      data: {
        labels: ["05:00", "06:00", "07:00", "08:00", "09:00"],
        datasets: [
          {
            label: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
            data: [-3, -2, -1, 0, 1],
            borderColor: "red",
            fill: false,
          },
        ],
      },
      options: getChartOptions(),
    });
  }

  const humidityGraph = document.getElementById("humidity-graph");
  if (humidityGraph) {
    const ctxHum = humidityGraph.getContext("2d");
    new Chart(ctxHum, {
      type: "line",
      data: {
        labels: ["05:00", "06:00", "07:00", "08:00", "09:00"],
        datasets: [
          {
            label: "–í–ª–∞–∂–Ω–æ—Å—Ç—å",
            data: [85, 90, 92, 93, 94],
            borderColor: "blue",
            fill: false,
          },
        ],
      },
      options: getChartOptions(),
    });
  }

  const windSpeedGraph = document.getElementById("wind-speed-graph");
  if (windSpeedGraph) {
    const ctxWind = windSpeedGraph.getContext("2d");
    new Chart(ctxWind, {
      type: "line",
      data: {
        labels: ["05:00", "06:00", "07:00", "08:00", "09:00"],
        datasets: [
          {
            label: "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞",
            data: [5, 7, 6, 8, 7],
            borderColor: "green",
            fill: false,
          },
        ],
      },
      options: getChartOptions(),
    });
  }
};

// –û–±—â–∏–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
function getChartOptions() {
  return {
    responsive: true,
    plugins: {
      legend: {
        labels: {
          color: document.body.classList.contains("light-theme")
            ? "#333"
            : "#fff",
        },
      },
    },
    scales: {
      x: {
        ticks: {
          color: document.body.classList.contains("light-theme")
            ? "#333"
            : "#fff",
        },
        grid: {
          color: document.body.classList.contains("light-theme")
            ? "#ccc"
            : "#555",
        },
      },
      y: {
        ticks: {
          color: document.body.classList.contains("light-theme")
            ? "#333"
            : "#fff",
        },
        grid: {
          color: document.body.classList.contains("light-theme")
            ? "#ccc"
            : "#555",
        },
      },
    },
  };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flatpickr –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
const customTimeBtn = document.getElementById("custom-time-btn");
const calendarInput = document.getElementById("calendar-input");

if (customTimeBtn && calendarInput) {
  let fp = null;

  customTimeBtn.onclick = function () {
    calendarInput.style.display =
      calendarInput.style.display === "none" ? "inline-block" : "none";

    if (calendarInput.style.display === "inline-block" && !fp) {
      fp = flatpickr(calendarInput, {
        mode: "range", // –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –æ–¥–Ω—É –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω
        dateFormat: "Y-m-d",
        onOpen: function () {
          // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
          if (document.body.classList.contains("light-theme")) {
            fp.calendarContainer.classList.remove("dark");
            fp.calendarContainer.classList.add("light");
          } else {
            fp.calendarContainer.classList.remove("light");
            fp.calendarContainer.classList.add("dark");
          }
        },
        onChange: function (selectedDates, dateStr, instance) {
          console.log(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${dateStr}`);
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        },
      });
    }
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
const timeButtons = document.querySelectorAll(".time-btn");

timeButtons.forEach((button) => {
  button.addEventListener("click", () => {
    const mode = button.getAttribute("data-mode");
    switch (mode) {
      case "today":
        // –í–∞—à –∫–æ–¥ –¥–ª—è "–°–µ–≥–æ–¥–Ω—è"
        console.log("–í—ã–±—Ä–∞–Ω–æ: –°–µ–≥–æ–¥–Ω—è");
        break;
      case "last24":
        // –í–∞—à –∫–æ–¥ –¥–ª—è "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏"
        console.log("–í—ã–±—Ä–∞–Ω–æ: –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏");
        break;
      case "custom":
        // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
        break;
      default:
        break;
    }
  });
});
